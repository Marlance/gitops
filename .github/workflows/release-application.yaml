name: release-application
on: 
  workflow_dispatch:
    inputs:
      dockerfile_repo:
        description: 'Repository containing the Dockerfile'
        required: true
      dockerfile_ref:
        description: 'Branch or tag of the repository'
        required: false
        default: 'main'
      dockerfile_path:
        description: 'Path to the Dockerfile'
        required: true
        default: './'
      dockerfile_name:
        description: 'Dockerfile name'
        required: true
        default: 'Dockerfile'
      application_name:
        description: 'Application name'
        required: true
      assume_role_arn:
        description: 'Role ARN to assume'
        required: true
      aws_region:
        description: 'AWS region'
        required: true
      cluster_name:
        description: 'Cluster Name where the application should be deployed'
        required: true

permissions:
  contents: write
  packages: write
  id-token: write

jobs:
  publish-image:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout current repository (for Helm charts)
        uses: actions/checkout@v2
      
      - name: Checkout repository with Dockerfile
        uses: actions/checkout@v2
        with:
          repository: ${{ github.event.inputs.dockerfile_repo }}
          ref: ${{ github.event.inputs.dockerfile_ref }}
          path: dockerfile-repo
      
      
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ github.event.inputs.assume_role_arn }}
          aws-region: ${{ github.event.inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push application image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "Navigating to Dockerfile location"
          cd dockerfile-repo/${{ github.event.inputs.dockerfile_path }}
          
          echo "Building Docker image"
          docker build -f ${{ github.event.inputs.dockerfile_name }} -t ${{ github.event.inputs.application_name }}:latest .

          echo "Tagging image"
          docker tag ${{ github.event.inputs.application_name }}:latest "$ECR_REGISTRY/${{ github.repository_owner }}/${{ github.event.inputs.application_name }}:${{ github.sha }}"

          echo "Pushing image"
          docker push "$ECR_REGISTRY/${{ github.repository_owner }}/${{ github.event.inputs.application_name }}:${{ github.sha }}"

      - name: Install Helm
        run: |
          wget https://get.helm.sh/helm-v3.16.2-linux-amd64.tar.gz
          tar xvf helm-v3.16.2-linux-amd64.tar.gz
          mv linux-amd64/helm /usr/local/bin/helm
          helm version

      - name: Prepare Helm chart directory
        run: |
          CHARTS_DIR="charts/${{ github.event.inputs.application_name }}"
          TEMPLATE_DIR="template-charts"
          ls -la
          if [ ! -d "$CHARTS_DIR" ]; then
            echo "Charts directory not found. Using template..."
            mkdir "charts"
            mkdir "$CHARTS_DIR"
            cp -r "$TEMPLATE_DIR"/* "$CHARTS_DIR"/

            # Replace <name> and <repo> in chart templates
            find "$CHARTS_DIR" -type f -exec sed -i "s/<name>/${{ github.event.inputs.application_name }}/g" {} +
            find "$CHARTS_DIR" -type f -exec sed -i "s|<repo>|ghcr.io/${{ github.repository_owner }}/${{ github.event.inputs.application_name }}:${{ github.sha }}|g" {} +
          fi

      - name: Login to GitHub Container Registry (GHCR)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io --username "${{ github.actor }}" --password-stdin

      - name: Push Helm chart to GHCR
        run: |
          CHART_PATH=charts/${{ github.event.inputs.application_name }}/Chart.yaml
          VALUES_PATH=charts/${{ github.event.inputs.application_name }}/values.yaml

          CURRENT_NEXTCHARTVERSION=$(grep "nextchartversion:" $VALUES_PATH | awk '{print $2}')
          # Parse version components
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_NEXTCHARTVERSION"
          
          # Increment version
          PATCH=$((PATCH + 1))
          if [ $PATCH -gt 50 ]; then
            PATCH=0
            MINOR=$((MINOR + 1))
          fi
          NEW_NEXTCHARTVERSION="$MAJOR.$MINOR.$PATCH"

          # Set chart version to nextchartversion
          echo "Setting version in Chart.yaml to $CURRENT_NEXTCHARTVERSION"
          sed -i "s/^version:.*/version: $CURRENT_NEXTCHARTVERSION/" $CHART_PATH
          

          # Update nextchartversion to new value
          echo "Setting nextchartversion in Chart.yaml to $NEW_NEXTCHARTVERSION"
          sed -i "s/^nextchartversion:.*/nextchartversion: $NEW_NEXTCHARTVERSION/" $VALUES_PATH
          
          # Update values.image.tag to shortSha
          echo "Setting values.image.tag in values.yaml to '{{inputs.parameters.shortSha}}'"
          sed -i "s/^  tag:.*/  tag: 'latest'/" $VALUES_PATH
          
          echo "Updated Chart.yaml:"
          cat $CHART_PATH
          cd charts/${{ github.event.inputs.application_name }}

          CHART_NAME=$(grep "^name:" Chart.yaml | cut -d ' ' -f 2)
          CHART_VERSION=$(grep "^version:" Chart.yaml | cut -d ' ' -f 2)
          CHART_ARCHIVE_FILE="$CHART_NAME-$CHART_VERSION.tgz"
          helm package .

          echo "Pushing Helm chart: $CHART_ARCHIVE_FILE"
          helm push "$CHART_ARCHIVE_FILE" oci://ghcr.io/${{ github.repository_owner }}/charts
          
      
      - name: Tag Application
        run : |
          cd $GITHUB_WORKSPACE
          cp template-application.yaml registry/clusters/${{ github.event.inputs.cluster_name }}/
          # Replace placeholders in the copied file
          sed -i "s/<namespace>/${{ github.event.inputs.application_name }}/g" registry/clusters/${{ github.event.inputs.cluster_name }}/application.yaml
          sed -i "s/<cluster-name>/${{ github.event.inputs.cluster_name }}/g" registry/clusters/${{ github.event.inputs.cluster_name }}/application.yaml
          sed -i "s|<chart-version>|$CURRENT_NEXTCHARTVERSION|g" registry/clusters/${{ github.event.inputs.cluster_name }}/application.yaml
          sed -i "s/<chart-name>/${{ github.event.inputs.application_name }}/g" registry/clusters/${{ github.event.inputs.cluster_name }}/application.yaml
          sed -i "s/<repo>/${{ github.repository_owner }}/g" registry/clusters/${{ github.event.inputs.cluster_name }}/application.yaml

      - name: Commit and push updated Helm chart
        run: |
          git config --global user.name "kbot"
          git config --global user.email "kbot@gmail.com"
          
          git add charts/${{ github.event.inputs.application_name }}
          git commit -m "Update Helm chart for ${{ github.event.inputs.application_name }}"
          git push origin main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

